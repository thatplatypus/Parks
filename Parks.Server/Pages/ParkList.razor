@page "/parks"
@inject Parks.Repository.IParkRepositoryService _parkRepository

<PageTitle>Parks</PageTitle>

<h1>Parks</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (parks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <h2 class="col-10">List of Parks</h2>
        <button type="button" class="btn btn-primary col-2" onclick="@AddPark">Add park</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Off-Leash Dog Area</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var park in parks)
            {
                <tr>
                    <td>@park.Name</td>
                    <td>@park.Location</td>
                    <td>@park.OffLeashDogArea</td>
                </tr>
            }
        </tbody>
    </table>

    @if (ModalOpen)
    {
        <Parks.Server.Components.Shared.Modal Title="Add a new park"
                OnClose="@CloseModal"
                AcceptCaption="Save">
            <ParkInputForm>

            </ParkInputForm>
        </Parks.Server.Components.Shared.Modal>
    }
}

@code {
    private Parks.Contract.Models.Park[]? parks;
    private bool ModalOpen = false;

    protected override void OnInitialized()
    {
        parks = _parkRepository.GetParksAsync().ToArray();
    }

    protected void AddPark()
    {

        ModalOpen = true;
    }

    protected async Task CloseModal(bool result) {
        ModalOpen = false;
        await Task.CompletedTask;
    }
}

